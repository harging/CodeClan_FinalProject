{"ast":null,"code":"var _jsxFileName = \"/Users/user/FinalProject/dive_app_front_end/src/components/DiveSelect.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DiveSelect = _ref => {\n  let {\n    dives,\n    onDiveSelected\n  } = _ref;\n  // Why can't I make the whole line a button by wrapping it in the button tag?\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: dives.map(dive => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [dive.diveNum, \" - \", dive.place, \", \", dive.diveSite, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onDiveSelected(dive.id),\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 72\n        }, this)]\n      }, dive.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n\n_c = DiveSelect;\nexport default DiveSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"DiveSelect\");","map":{"version":3,"sources":["/Users/user/FinalProject/dive_app_front_end/src/components/DiveSelect.js"],"names":["DiveSelect","dives","onDiveSelected","map","dive","diveNum","place","diveSite","id"],"mappings":";;;AAAA,MAAMA,UAAU,GAAG,QAA+B;AAAA,MAA9B;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA8B;AAE9C;AAEA,sBACI;AAAA,cACKD,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAI;AACf,0BACI;AAAA,mBACKA,IAAI,CAACC,OADV,SACsBD,IAAI,CAACE,KAD3B,QACoCF,IAAI,CAACG,QADzC,oBACmD;AAAQ,UAAA,OAAO,EAAE,MAAML,cAAc,CAACE,IAAI,CAACI,EAAN,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADnD;AAAA,SAASJ,IAAI,CAACI,EAAd;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KANA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAfD;;KAAMR,U;AAkBN,eAAeA,UAAf","sourcesContent":["const DiveSelect = ({ dives, onDiveSelected }) => {\n\n    // Why can't I make the whole line a button by wrapping it in the button tag?\n\n    return (\n        <ul>\n            {dives.map(dive => {\n                return (\n                    <li key={dive.id}>\n                        {dive.diveNum} - {dive.place}, {dive.diveSite} <button onClick={() => onDiveSelected(dive.id)}>View</button>\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\n\n\nexport default DiveSelect"]},"metadata":{},"sourceType":"module"}